*---------------------------------------------------------------------------* Programa : ZPFIR_075* Cliente  : Gafisa* Módulo   : FI* Transação:* Descrição: Importação dos Arquivos de Cobrança SAP* Autor    : Ralph Nova          Data: 26/01/2009*---------------------------------------------------------------------------* Histórico de Alterações:*---------------------------------------------------------------------------* Data       |Change #   | Autor            |Alteração*---------------------------------------------------------------------------* 26/01/2009 |DEVK924618 | Ralph Nova       |Desenvolvimeno Inicial*---------------------------------------------------------------------------REPORT  zpfir_075.*----------------------------------------------------------------------**  Tabelas*----------------------------------------------------------------------*TABLES:  ztbfi_arq_cobr.*-------------------------------------------------------------------------*	Definição de Tipos*-------------------------------------------------------------------------TYPE-POOLS:  slis,  icon.*-----------------------------------------------------------------------*  Tipos*-----------------------------------------------------------------------TYPES:  BEGIN OF y_match_hbkid,    hbkid    TYPE /pws/zyfct042-hbkid,    banka    TYPE /pws/zyfct042-banka,  END   OF y_match_hbkid,  BEGIN OF y_valuetab,    x(80)    TYPE c,  END   OF y_valuetab,  BEGIN OF y_log,    zcodbanco     TYPE ztbfi_arq_cobr-zcodbanco,    zdiretorig    TYPE ztbfi_arq_cobr-zdiretorig,    destino       TYPE ztbfi_arq_cobr-zdiretproc,    status        TYPE char4,    mensagem      TYPE string,  END   OF y_log.*-----------------------------------------------------------------------*  Tabelas Internas*-----------------------------------------------------------------------DATA:  t_ztbfi_arq_cobr    TYPE TABLE OF ztbfi_arq_cobr,  t_arquivos          TYPE STANDARD TABLE OF file_info,  t_arquivos_unix     TYPE TABLE OF epsfili,  t_log               TYPE TABLE OF y_log,  t_fieldcat          TYPE slis_t_fieldcat_alv,  t_events            TYPE slis_t_event,  t_bdc               TYPE STANDARD TABLE OF bdcdata,  t_messtab           TYPE STANDARD TABLE OF bdcmsgcoll.*-----------------------------------------------------------------------*  Work Áreas*-----------------------------------------------------------------------DATA:  wa_ztbfi_arq_cobr    TYPE ztbfi_arq_cobr,  wa_arquivos          TYPE file_info,  wa_arquivos_unix     TYPE epsfili,  wa_log               TYPE y_log,  wa_events            TYPE LINE OF slis_t_event,  wa_fieldcat          TYPE slis_fieldcat_alv,  wa_bdc               TYPE bdcdata,  wa_messtab           TYPE bdcmsgcoll,  wa_options           TYPE ctu_params.*-----------------------------------------------------------------------*  Variáveis*-----------------------------------------------------------------------DATA:  v_formato(01)      TYPE c.*-----------------------------------------------------------------------*  Constantes*-----------------------------------------------------------------------CONSTANTS:  c_bradesco(03)       TYPE c VALUE '237',  c_b(01)              TYPE c VALUE 'B',  c_1(01)              TYPE c VALUE '1',  c_t_log(05)          TYPE c VALUE 'T_LOG',  c_zcodbanco(09)      TYPE c VALUE 'ZCODBANCO',  c_zdiretorig(10)     TYPE c VALUE 'ZDIRETORIG',  c_destino(07)        TYPE c VALUE 'DESTINO',  c_status(06)         TYPE c VALUE 'STATUS',  c_mensagem(08)       TYPE c VALUE 'MENSAGEM',  c_top_of_page(11)    TYPE c VALUE 'TOP_OF_PAGE',  c_zf_top_of_page(14) TYPE c VALUE 'ZF_TOP_OF_PAGE'.*----------------------------------------------------------------------**  Tela de Seleção*----------------------------------------------------------------------*SELECTION-SCREEN BEGIN OF BLOCK a WITH FRAME TITLE text-003.SELECT-OPTIONS:  s_codban FOR ztbfi_arq_cobr-zcodbanco NO-EXTENSION OBLIGATORY.SELECTION-SCREEN END OF BLOCK a.SELECTION-SCREEN BEGIN OF BLOCK b WITH FRAME TITLE text-002.PARAMETERS:  p_zff5    TYPE c RADIOBUTTON GROUP a,  p_ff5     TYPE c RADIOBUTTON GROUP a.SELECTION-SCREEN END OF BLOCK b.SELECTION-SCREEN BEGIN OF BLOCK c WITH FRAME TITLE text-014.PARAMETERS:  p_local    TYPE c RADIOBUTTON GROUP c,  p_unix     TYPE c RADIOBUTTON GROUP c.SELECTION-SCREEN END OF BLOCK c.*----------------------------------------------------------------------**  At Selection-Screen*----------------------------------------------------------------------*AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_codban-low.  PERFORM zf_match_code_banco USING 'S_CODBAN-LOW'                              CHANGING s_codban-low.AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_codban-high.  PERFORM zf_match_code_banco USING 'S_CODBAN-HIGH'                              CHANGING s_codban-high.*----------------------------------------------------------------------**  Processamento*----------------------------------------------------------------------*START-OF-SELECTION.* Seleção dos Dados  PERFORM zf_selecao_dados.* Processamento dos dados  PERFORM zf_processa_dados.  IF NOT t_log[] IS INITIAL.* Monta relatório    PERFORM zf_monta_relatorio .* Exibe relatório    PERFORM zf_exibe_relatorio.  ENDIF.*----------------------------------------------------------------------**  Form  zf_match_code_banco*----------------------------------------------------------------------**    Matchcode do campo Banco*----------------------------------------------------------------------*FORM zf_match_code_banco  USING p_campo TYPE any                          CHANGING p_value TYPE any.  DATA:    l_hbkid            TYPE t012-hbkid,    l_index            TYPE sy-tabix,    l_select_value(01) TYPE c.  RANGES:    lr_hbkid         FOR t012-hbkid.  DATA:    tl_match_hbkid   TYPE STANDARD TABLE OF y_match_hbkid,    tl_fields        TYPE STANDARD TABLE OF help_value,    tl_valuetab      TYPE STANDARD TABLE OF y_valuetab,    tl_select_values TYPE STANDARD TABLE OF help_vtab.  DATA:    wa_match_hbkid   TYPE y_match_hbkid,    wa_fields        TYPE help_value,    wa_valuetab      TYPE y_valuetab,    wa_select_values TYPE help_vtab.  PERFORM zf_busca_valor_tela USING p_campo                           CHANGING l_hbkid.  IF NOT l_hbkid IS INITIAL.    CLEAR lr_hbkid.    lr_hbkid-sign   = 'I'.    lr_hbkid-option = 'CP'.    lr_hbkid-low    = l_hbkid.    APPEND lr_hbkid.  ENDIF.* Selecionando dados que aparecerão no help  SELECT hbkid         banka  INTO TABLE tl_match_hbkid  FROM /pws/zyfct042  WHERE hbkid IN lr_hbkid.* Carregando campos para help  CLEAR wa_fields.  wa_fields-tabname    = '/PWS/ZYFCT042'.  wa_fields-fieldname  = 'HBKID'.  wa_fields-selectflag = ' '.  APPEND wa_fields TO tl_fields.  CLEAR wa_fields.  wa_fields-tabname    = '/PWS/ZYFCT042'.  wa_fields-fieldname  = 'BANKA'.  wa_fields-selectflag = 'X'.  APPEND wa_fields TO tl_fields.* Carregando informações para consulta no search-help  LOOP AT tl_match_hbkid INTO wa_match_hbkid.    CLEAR wa_valuetab.    wa_valuetab-x = wa_match_hbkid-hbkid.    APPEND wa_valuetab TO tl_valuetab.    CLEAR wa_valuetab.    wa_valuetab-x = wa_match_hbkid-banka.    APPEND wa_valuetab TO tl_valuetab.  ENDLOOP.* Exibindo tela para seleção de dados do serch-help  CALL FUNCTION 'HELP_VALUES_GET_WITH_TABLE_EXT'    EXPORTING      fieldname                 = 'HBKID'      tabname                   = '/PWS/ZYFCT042'    IMPORTING      index                     = l_index      select_value              = l_select_value    TABLES      fields                    = tl_fields      select_values             = tl_select_values      valuetab                  = tl_valuetab    EXCEPTIONS      field_not_in_ddic         = 1      more_then_one_selectfield = 2      no_selectfield            = 3      OTHERS                    = 4.  CHECK sy-subrc EQ 0.  CLEAR wa_select_values.  READ TABLE tl_select_values INTO wa_select_values    WITH KEY fieldname = 'HBKID'.  p_value = wa_select_values-value(05).ENDFORM.                    " zf_match_code_banco*----------------------------------------------------------------------**  Form  zf_busca_valor_tela*----------------------------------------------------------------------**    Recupera os valores da tela*----------------------------------------------------------------------*FORM zf_busca_valor_tela USING p_campo    TYPE    c                      CHANGING p_valor    TYPE    any.  DATA:    tl_dynpread     TYPE STANDARD TABLE OF dynpread.  DATA:    wa_dynpread     TYPE dynpread.  REFRESH tl_dynpread.  CLEAR wa_dynpread.  wa_dynpread-fieldname = p_campo.  APPEND wa_dynpread TO tl_dynpread.  CALL FUNCTION 'DYNP_VALUES_READ'    EXPORTING      dyname     = sy-repid      dynumb     = sy-dynnr    TABLES      dynpfields = tl_dynpread.  CLEAR wa_dynpread.  READ TABLE tl_dynpread INTO wa_dynpread INDEX 1.  p_valor = wa_dynpread-fieldvalue.  TRANSLATE p_valor TO UPPER CASE.ENDFORM.                    " zf_busca_valor_tela*&---------------------------------------------------------------------**&      Form  ZF_SELECAO_DADOS*&---------------------------------------------------------------------**       Seleção dos dados*----------------------------------------------------------------------*FORM zf_selecao_dados .* Selecionar os Arquivos de cobrança a serem processados  SELECT *    FROM ztbfi_arq_cobr    INTO TABLE t_ztbfi_arq_cobr    WHERE zcodbanco IN s_codban.  IF NOT sy-subrc IS INITIAL.* Nenhum dado selecionado para o critério de seleção    MESSAGE text-001 TYPE 'S' DISPLAY LIKE 'E'.  ENDIF.ENDFORM.                    " ZF_SELECAO_DADOS*&---------------------------------------------------------------------**&      Form  ZF_PROCESSA_DADOS*&---------------------------------------------------------------------**       Processamento dos dados*----------------------------------------------------------------------*FORM zf_processa_dados .  DATA:    l_caminho(128)      TYPE c,    l_message           TYPE string,    l_destino(128)      TYPE c,    l_status            TYPE char4.* Limpa tabela de log  REFRESH t_log.* Processa os dados  LOOP AT t_ztbfi_arq_cobr INTO wa_ztbfi_arq_cobr.* Limpa tabelas internas    REFRESH: t_arquivos, t_arquivos_unix.* Recupera os arquivos do diretório    PERFORM zf_recupera_arquivos.    IF p_unix = 'X'.* Monta a tabela t_arquivos se está rodando como UNIX      PERFORM zf_monta_arquivos_unix.    ENDIF.* Lê todos os arquivos da pasta (Este loop vai ter poucos registros)    LOOP AT t_arquivos INTO wa_arquivos.* Determina o caminho do arquivo      CONCATENATE wa_ztbfi_arq_cobr-zdiretorig                  wa_arquivos-filename             INTO l_caminho.* Verifica qual banco      IF wa_ztbfi_arq_cobr-zcodbanco <> c_bradesco.        CLEAR v_formato.        v_formato = c_b.      ELSE.        CLEAR v_formato.        v_formato = c_1.      ENDIF.* Limpa tabelas para o call transaction      REFRESH: t_bdc, t_messtab.      CLEAR: wa_options.* Opções para o SHDB      wa_options-dismode = 'N'.      wa_options-updmode = 'S'.      IF p_zff5 = 'X'.* Monta bdc data        PERFORM zf_insere_bdcdata USING:          'X'       'ZRFEBKA00'        '1000',          ' '       'BDC_OKCODE'       '=ONLI',          ' '       'EINLESEN'         'X',          ' '       'FORMAT'           v_formato,          ' '       'AUSZFILE'         l_caminho.        IF p_local IS INITIAL.* Desmarca se o arquivo indicado é do UNIX          PERFORM zf_insere_bdcdata USING:            ' '       'PCUPLOAD'         ' '.        ELSE.* Marca se o arqivo indicado está Local          PERFORM zf_insere_bdcdata USING:            ' '       'PCUPLOAD'         'X'.        ENDIF.        PERFORM zf_insere_bdcdata USING:          ' '       'PA_XCALL'         'X',          ' '       'VALUT_ON'         'X',          ' '       'P_KOAUSZ'         'X',          ' '       'P_BUPRO'          'X',          ' '       'P_STATIK'         'X'.        CALL TRANSACTION 'ZFF.5'          USING t_bdc          OPTIONS FROM wa_options          MESSAGES INTO t_messtab.** Chama transação ZFF.5*        SUBMIT zrfebka00 USING SELECTION-SCREEN '1000'*                         WITH einlesen      EQ 'X'*                         WITH format        EQ v_formato*                         WITH auszfile      EQ l_caminho*                         WITH pcupload      EQ 'X'*                         WITH pa_xcall      EQ 'X'*                         WITH valut_on      EQ 'X'*                         EXPORTING LIST TO MEMORY AND RETURN.      ELSE.* Monta bdc data        PERFORM zf_insere_bdcdata USING:          'X'       'RFEBKA00'         '1000',          ' '       'BDC_OKCODE'       '=ONLI',          ' '       'EINLESEN'         'X',          ' '       'FORMAT'           v_formato,          ' '       'AUSZFILE'         l_caminho.        IF p_local IS INITIAL.* Desmarca se o arquivo indicado é do UNIX          PERFORM zf_insere_bdcdata USING:            ' '       'PCUPLOAD'         ' '.        ELSE.* Marca se o arqivo indicado está Local          PERFORM zf_insere_bdcdata USING:            ' '       'PCUPLOAD'         'X'.        ENDIF.        CALL TRANSACTION 'FF.5'          USING t_bdc          OPTIONS FROM wa_options          MESSAGES INTO t_messtab.** Chama transação FF.5 (Standard)*        SUBMIT rfebka00 USING SELECTION-SCREEN '1000'*                        WITH einlesen      EQ 'X'*                        WITH format        EQ v_formato*                        WITH auszfile      EQ l_caminho*                        WITH pcupload      EQ 'X'*                        WITH pa_xcall      EQ 'X'*                        WITH valut_on      EQ 'X'*                        EXPORTING LIST TO MEMORY AND RETURN.      ENDIF.* Verifica se o call transaction ocorreu com sucesso      IF sy-subrc IS INITIAL.* Destino do arquivo        CLEAR l_destino.        CONCATENATE wa_ztbfi_arq_cobr-zdiretproc                    wa_arquivos-filename               INTO l_destino.        READ TABLE t_messtab TRANSPORTING NO FIELDS WITH KEY msgtyp = 'I'.        IF sy-subrc IS INITIAL.          CLEAR l_status.          l_status = icon_yellow_light.        ELSE.          CLEAR l_status.          l_status = icon_green_light.* Adiciona registro no LOG          PERFORM zf_add_log USING wa_ztbfi_arq_cobr-zcodbanco                                   l_caminho                                   l_destino                                   l_status                                   text-013.        ENDIF.      ELSE.* Destino do arquivo        CLEAR l_destino.        CONCATENATE wa_ztbfi_arq_cobr-zdireterro                    wa_arquivos-filename               INTO l_destino.        CLEAR l_status.        l_status = icon_red_light.      ENDIF.      IF p_local = 'X'.* Move arquivo para pasta processados        PERFORM zf_move_arquivo USING l_caminho                                      l_destino.      ELSE.* Move arquivo para pasta processados (UNIX)        PERFORM zf_move_arquivo_unix USING l_caminho                                           l_destino.      ENDIF.      LOOP AT t_messtab INTO wa_messtab.* Monta mensagem        CLEAR l_message.        CALL FUNCTION 'MESSAGE_TEXT_BUILD'          EXPORTING            msgid               = wa_messtab-msgid            msgnr               = wa_messtab-msgnr            msgv1               = wa_messtab-msgv1            msgv2               = wa_messtab-msgv2            msgv3               = wa_messtab-msgv3            msgv4               = wa_messtab-msgv4          IMPORTING            message_text_output = l_message.* Adiciona registro no LOG        PERFORM zf_add_log USING wa_ztbfi_arq_cobr-zcodbanco                                 l_caminho                                 l_destino                                 l_status                                 l_message.      ENDLOOP.    ENDLOOP.  ENDLOOP.ENDFORM.                    " ZF_PROCESSA_DADOS*----------------------------------------------------------------------**  Form  zf_recupera_arquivos*----------------------------------------------------------------------**    Recupera os arquivos do diretório*----------------------------------------------------------------------*FORM zf_recupera_arquivos.  DATA:    l_count                TYPE        i,    lt_arquivos            TYPE        STANDARD TABLE OF file_info,    lt_arquivos_unix       TYPE        STANDARD TABLE OF epsfili,    lw_arquivos            TYPE        file_info,    l_dir_name2            TYPE        string,    l_dir_unix             TYPE        epsf-epsdirnam.  IF p_local = 'X'.    CLEAR l_dir_name2.    l_dir_name2 = wa_ztbfi_arq_cobr-zdiretorig.* Método que retorna os arquivos que existem no relatório    CALL METHOD cl_gui_frontend_services=>directory_list_files      EXPORTING        directory                   = l_dir_name2        files_only                  = 'X'      CHANGING        file_table                  = lt_arquivos        count                       = l_count      EXCEPTIONS        cntl_error                  = 1        directory_list_files_failed = 2        wrong_parameter             = 3        error_no_gui                = 4        not_supported_by_gui        = 5        OTHERS                      = 6.    IF sy-subrc IS INITIAL.      t_arquivos[] = lt_arquivos[].    ELSE.* Não foi possível encontrar arquivos no dieretório indicado      MESSAGE text-015 TYPE 'S' DISPLAY LIKE 'E'.      LEAVE LIST-PROCESSING.    ENDIF.  ELSE.    CLEAR l_dir_unix.    l_dir_unix = wa_ztbfi_arq_cobr-zdiretorig.    TRANSLATE l_dir_unix TO LOWER CASE.    CALL FUNCTION 'EPS_GET_DIRECTORY_LISTING'      EXPORTING        dir_name               = l_dir_unix      TABLES        dir_list               = lt_arquivos_unix      EXCEPTIONS        invalid_eps_subdir     = 1        sapgparam_failed       = 2        build_directory_failed = 3        no_authorization       = 4        read_directory_failed  = 5        too_many_read_errors   = 6        empty_directory_list   = 7        OTHERS                 = 8.    IF sy-subrc IS INITIAL.      t_arquivos_unix[] = lt_arquivos_unix[].    ELSE.* Não foi possível encontrar arquivos no dieretório indicado      MESSAGE text-015 TYPE 'S' DISPLAY LIKE 'E'.      LEAVE LIST-PROCESSING.    ENDIF.  ENDIF.ENDFORM.                    " zf_recupera_arquivos*&---------------------------------------------------------------------**&      Form  ZF_MONTA_RELATORIO*&---------------------------------------------------------------------**       Monta relatório*----------------------------------------------------------------------*FORM zf_monta_relatorio .  CLEAR wa_fieldcat.  wa_fieldcat-tabname        = c_t_log.  wa_fieldcat-fieldname      = c_zcodbanco.  wa_fieldcat-reptext_ddic   = text-005. "Banco  APPEND wa_fieldcat TO t_fieldcat.  CLEAR wa_fieldcat.  wa_fieldcat-tabname        = c_t_log.  wa_fieldcat-fieldname      = c_zdiretorig.  wa_fieldcat-reptext_ddic   = text-006. "Arquivo Origem  APPEND wa_fieldcat TO t_fieldcat.  CLEAR wa_fieldcat.  wa_fieldcat-tabname        = c_t_log.  wa_fieldcat-fieldname      = c_destino.  wa_fieldcat-reptext_ddic   = text-007. "Arquivo Destino  APPEND wa_fieldcat TO t_fieldcat.  CLEAR wa_fieldcat.  wa_fieldcat-tabname        = c_t_log.  wa_fieldcat-fieldname      = c_status.  wa_fieldcat-reptext_ddic   = text-008. "Status  wa_fieldcat-icon           = 'X'.  APPEND wa_fieldcat TO t_fieldcat.  CLEAR wa_fieldcat.  wa_fieldcat-tabname        = c_t_log.  wa_fieldcat-fieldname      = c_mensagem.  wa_fieldcat-reptext_ddic   = text-012. "mensagem  APPEND wa_fieldcat TO t_fieldcat.* Grava eventos para o ALV  CLEAR wa_events.  wa_events-name = c_top_of_page.  wa_events-form = c_zf_top_of_page.  APPEND wa_events TO t_events.ENDFORM.                    " ZF_MONTA_RELATORIO*&---------------------------------------------------------------------**&      Form  ZF_TOP_OF_PAGE*&---------------------------------------------------------------------**       Cabeçalho do relatório*----------------------------------------------------------------------*FORM zf_top_of_page.                                        "#EC CALLED* Variáveis para o cabeçalho do ALV  DATA: t_header TYPE slis_t_listheader,        wa_header TYPE slis_listheader.* Nome do report  wa_header-typ  = 'H'.  wa_header-info = text-009.      "Título do Relatório  APPEND wa_header TO t_header.  CLEAR wa_header.* Usuário  wa_header-typ  = 'S'.  wa_header-key = text-010. "Usuário  wa_header-info = sy-uname.  APPEND wa_header TO t_header.  CLEAR wa_header.* Data do processamento  wa_header-typ  = 'S'.  wa_header-key = text-011. "Data  WRITE sy-datum TO wa_header-info.  APPEND wa_header TO t_header.  CLEAR wa_header.  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'    EXPORTING      it_list_commentary = t_header      i_logo             = 'ZLOGO_GAFISA'.ENDFORM.                    " zf_top_of_page*&---------------------------------------------------------------------**&      Form  ZF_EXIBE_RELATORIO*&---------------------------------------------------------------------**       Exibe relatório ALV*----------------------------------------------------------------------*FORM zf_exibe_relatorio .  DATA: lc_repid TYPE sy-repid.  MOVE: sy-repid TO lc_repid.  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'    EXPORTING      i_callback_program       = lc_repid      i_callback_pf_status_set = 'ZF_SET_PF_STATUS'*      is_layout                = gs_layout      it_events                = t_events      it_fieldcat              = t_fieldcat*      it_sort                  = gw_sort*      is_variant               = gs_variant    TABLES      t_outtab                 = t_log    EXCEPTIONS      program_error            = 1      OTHERS                   = 2.  IF sy-subrc <> 0.    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.  ENDIF.ENDFORM.                    " ZF_EXIBE_RELATORIO*&---------------------------------------------------------------------**&      Form  ZF_SET_PF_STATUS*&---------------------------------------------------------------------**       Carrega barra de botões*----------------------------------------------------------------------*FORM zf_set_pf_status                                       "#EC CALLED                USING rt_extab TYPE slis_t_extab.           "#EC NEEDED  SET PF-STATUS 'ZSTANDARD_FULLSCREEN'.ENDFORM.                    "zf_set_pf_status*&---------------------------------------------------------------------**&      Form  ZF_ADD_LOG*&---------------------------------------------------------------------**       Adiciona registro no log*----------------------------------------------------------------------**      -->P_BUKRS*      -->P_ZCODBANCO*      -->P_ORIGEM*      -->P_DESTINO*      -->P_STATUS*----------------------------------------------------------------------*FORM zf_add_log  USING    p_banco                          p_origem                          p_destino                          p_status                          p_msg.* Adiciona registro  CLEAR wa_log.  wa_log-zcodbanco  = p_banco.  wa_log-zdiretorig = p_origem.  wa_log-destino    = p_destino.  wa_log-status     = p_status.  wa_log-mensagem   = p_msg.  APPEND wa_log TO t_log.ENDFORM.                    " ZF_ADD_LOG*&---------------------------------------------------------------------**&      Form  ZF_INSERE_BDCDATA*&---------------------------------------------------------------------**       Monta BDC data*----------------------------------------------------------------------*FORM zf_insere_bdcdata USING pc_inicio                             pc_nome                             pc_valor.                      "#EC *  CLEAR wa_bdc.  IF pc_inicio IS INITIAL.    MOVE: pc_nome   TO wa_bdc-fnam,          pc_valor  TO wa_bdc-fval.  ELSE.    MOVE: pc_inicio TO wa_bdc-dynbegin,          pc_nome   TO wa_bdc-program,          pc_valor  TO wa_bdc-dynpro.  ENDIF.  APPEND wa_bdc TO t_bdc.  CLEAR wa_bdc.ENDFORM.                    " ZF_INSERE_BDCDATA*&---------------------------------------------------------------------**&      Form  ZF_MOVE_ARQUIVO*&---------------------------------------------------------------------**       Move arquivo*----------------------------------------------------------------------*FORM zf_move_arquivo USING p_origem  TYPE any                           p_destino TYPE any.  DATA: l_origem      TYPE string,        l_destino     TYPE string,        l_deletar     TYPE rlgrap-filename.  DATA: tl_data_tab    TYPE TABLE OF string.  CLEAR l_origem.  l_origem = p_origem.  REFRESH tl_data_tab.* Faz o upload do arquivo local  CALL FUNCTION 'GUI_UPLOAD'    EXPORTING      filename                = l_origem    TABLES      data_tab                = tl_data_tab    EXCEPTIONS      file_open_error         = 1      file_read_error         = 2      no_batch                = 3      gui_refuse_filetransfer = 4      invalid_type            = 5      no_authority            = 6      unknown_error           = 7      bad_data_format         = 8      header_not_allowed      = 9      separator_not_allowed   = 10      header_too_long         = 11      unknown_dp_error        = 12      access_denied           = 13      dp_out_of_memory        = 14      disk_full               = 15      dp_timeout              = 16      OTHERS                  = 17.  IF sy-subrc IS INITIAL.    CLEAR l_deletar.    l_deletar = l_origem.* Deleta o registro da pasta original    CALL FUNCTION 'GUI_DELETE_FILE'      EXPORTING        file_name = l_deletar      EXCEPTIONS        failed    = 1        OTHERS    = 2.    IF sy-subrc IS INITIAL.    ENDIF.* Prepara o destino    CLEAR l_destino.    l_destino = p_destino.* Faz o download do arquivo local    CALL FUNCTION 'GUI_DOWNLOAD'      EXPORTING        filename                = l_destino      TABLES        data_tab                = tl_data_tab      EXCEPTIONS        file_write_error        = 1        no_batch                = 2        gui_refuse_filetransfer = 3        invalid_type            = 4        no_authority            = 5        unknown_error           = 6        header_not_allowed      = 7        separator_not_allowed   = 8        filesize_not_allowed    = 9        header_too_long         = 10        dp_error_create         = 11        dp_error_send           = 12        dp_error_write          = 13        unknown_dp_error        = 14        access_denied           = 15        dp_out_of_memory        = 16        disk_full               = 17        dp_timeout              = 18        file_not_found          = 19        dataprovider_exception  = 20        control_flush_error     = 21        OTHERS                  = 22.    IF sy-subrc IS INITIAL.    ENDIF.  ENDIF.ENDFORM.                    " ZF_MOVE_ARQUIVO*&---------------------------------------------------------------------**&      Form  ZF_MONTA_ARQUIVOS_UNIX*&---------------------------------------------------------------------**       Monta a tabela T_ARQUIVOS com os arquivos trazidos do UNIX*----------------------------------------------------------------------*FORM zf_monta_arquivos_unix .  REFRESH t_arquivos.  LOOP AT t_arquivos_unix INTO wa_arquivos_unix.* Adiciona registro na tabela    CLEAR wa_arquivos.    wa_arquivos-filename = wa_arquivos_unix-name.    APPEND wa_arquivos TO t_arquivos.  ENDLOOP.ENDFORM.                    " ZF_MONTA_ARQUIVOS_UNIX*&---------------------------------------------------------------------**&      Form  ZF_MOVE_ARQUIVO_UNIX*&---------------------------------------------------------------------**       Move arquivo (UNIX)*----------------------------------------------------------------------**      -->P_CAMINHO  Origem*      -->P_DESTINO  Destino*----------------------------------------------------------------------*FORM zf_move_arquivo_unix  USING    p_caminho                                    p_destino.  DATA: l_caminho     TYPE string,        l_destino     TYPE string,        l_linha       TYPE string.  DATA: tl_data_tab    TYPE TABLE OF string,        wa_data_tab    TYPE string.  CLEAR l_caminho.  l_caminho = p_caminho.  TRANSLATE l_caminho TO LOWER CASE.  CLEAR l_destino.  l_destino = p_destino.  TRANSLATE l_destino TO LOWER CASE.  REFRESH tl_data_tab.* Abre o arquivo de origem  OPEN DATASET l_caminho FOR INPUT IN TEXT MODE ENCODING UTF-8.  IF sy-subrc IS INITIAL.    DO.      READ DATASET l_caminho INTO l_linha.      IF NOT sy-subrc IS INITIAL.        EXIT.      ENDIF.* Adiciona registro na tabela      APPEND l_linha TO tl_data_tab.    ENDDO.* Fecha arquivo de destino    CLOSE DATASET l_caminho.* Abre o arquivo de origem    OPEN DATASET l_destino FOR OUTPUT IN TEXT MODE ENCODING UTF-8.* Preenche o arquivo de destino    LOOP AT tl_data_tab INTO wa_data_tab.      TRANSFER wa_data_tab TO l_destino.    ENDLOOP.* Fecha arquivo de destino    CLOSE DATASET l_destino.* Delete o arquivo da pasta de origem    DELETE DATASET l_caminho.  ENDIF.ENDFORM.                    " ZF_MOVE_ARQUIVO_UNIX