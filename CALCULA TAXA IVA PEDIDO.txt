IMPORTACAO
V_EBELN	TYPE	EBELN
V_EBELP	TYPE	EBELP

TABLES
T_KOMV	LIKE	KOMV


FUNCTION zasn_calculo_imposto_ecc.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     VALUE(V_EBELN) TYPE  EBELN OPTIONAL
*"     VALUE(V_EBELP) TYPE  EBELP OPTIONAL
*"  TABLES
*"      T_KOMV STRUCTURE  KOMV
*"----------------------------------------------------------------------
*  constants: bstyp-info value 'I',
*  bstyp-ordr value 'W',
*  bstyp-banf value 'B',
*  bstyp-best value 'F',
*  bstyp-anfr value 'A',
*  bstyp-kont value 'K',
*  bstyp-lfpl value 'L',
*  bstyp-lerf value 'Q'.

  CONSTANTS: cc_info VALUE 'I',
             cc_ordr VALUE 'W',
             cc_banf VALUE 'B',
             cc_best VALUE 'F',
             cc_anfr VALUE 'A',
             cc_kont VALUE 'K',
             cc_lfpl VALUE 'L',
             cc_lerf VALUE 'Q'.

  DATA : taxcom TYPE taxcom ,
  t_konv TYPE TABLE OF komv WITH HEADER LINE .


  DATA: BEGIN OF tkomv OCCURS 50.
          INCLUDE STRUCTURE komv.
  DATA: END OF tkomv.

  DATA: BEGIN OF tkomvd OCCURS 50. "Belegkonditionen
          INCLUDE STRUCTURE komvd.
  DATA: END OF tkomvd.

  DATA : BEGIN OF tkomvh OCCURS 50.
          INCLUDE STRUCTURE komv.
  DATA : vtext LIKE t685t-vtext.
  DATA : END OF tkomvh.

  SELECT SINGLE *
  INTO ekko
  FROM ekko
  WHERE ebeln = v_ebeln .

  SELECT SINGLE *
  INTO ekpo
  FROM ekpo
  WHERE ebeln = v_ebeln
  AND ebelp = v_ebelp .

  SELECT SINGLE *
  INTO t001
  FROM t001
  WHERE bukrs = ekko-bukrs .

  taxcom-bukrs = ekpo-bukrs.
  taxcom-budat = ekko-bedat.
  taxcom-waers = ekko-waers.
  taxcom-kposn = ekpo-ebelp.
  taxcom-mwskz = ekpo-mwskz.
  taxcom-txjcd = ekpo-txjcd.
  taxcom-shkzg = 'H'.
  taxcom-xmwst = 'X'.
*  if ekko-bstyp eq bstyp-best.
  IF ekko-bstyp EQ cc_best.
    taxcom-wrbtr = ekpo-netwr.
  ELSE.
    taxcom-wrbtr = ekpo-zwert.
  ENDIF.

  taxcom-lifnr = ekko-lifnr.
  taxcom-land1 = ekko-lands.
  taxcom-ekorg = ekko-ekorg.
  taxcom-hwaer = t001-waers.
  taxcom-llief = ekko-llief.
  taxcom-bldat = ekko-bedat.
  taxcom-matnr = ekpo-ematn.
  taxcom-werks = ekpo-werks.
  taxcom-bwtar = ekpo-bwtar.
  taxcom-matkl = ekpo-matkl.
  taxcom-meins = ekpo-meins.

*  IF ekko-bstyp EQ bstyp-best.
  IF ekko-bstyp EQ cc_best.
    taxcom-mglme = ekpo-menge.
  ELSE.
*    IF ekko-bstyp EQ bstyp-kont AND ekpo-abmng GT 0.
    IF ekko-bstyp EQ cc_kont AND ekpo-abmng GT 0.
      taxcom-mglme = ekpo-abmng.
    ELSE.
      taxcom-mglme = ekpo-ktmng.
    ENDIF.
  ENDIF.
  IF taxcom-mglme EQ 0.
    taxcom-mglme = 1000.
  ENDIF.
  taxcom-mtart = ekpo-mtart.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  CALL FUNCTION 'J_1BSA_COMPONENT_ACTIVE'
    EXPORTING
      bukrs                = ekko-bukrs
      component            = 'BR'
    EXCEPTIONS
      component_not_active = 1
      OTHERS               = 2.

  IF sy-subrc IS INITIAL.

    komk-mandt = ekko-mandt.
    komk-kalsm = ekko-kalsm.
    IF ekko-kalsm = ''.
      komk-kalsm = 'RM0000'.
    ENDIF.
    komk-kappl = 'M'.
    komk-waerk = ekko-waers.
    komk-knumv = ekko-knumv.
    komk-lifnr = ekko-lifnr.
    komp-kposn = ekpo-ebelp.
    komp-matnr = ekpo-matnr.
    komp-werks = ekpo-werks.
    komp-matkl = ekpo-matkl.
    komp-infnr = ekpo-infnr.
    komp-evrtn = ekpo-konnr.
    komp-evrtp = ekpo-ktpnr.


    CALL FUNCTION 'RV_PRICE_PRINT_ITEM'
      EXPORTING
        comm_head_i = komk
        comm_item_i = komp
        language    = 'E'
      TABLES
        tkomv       = tkomv
        tkomvd      = tkomvd.


    CALL FUNCTION 'J_1B_NF_PO_DISCOUNTS'
      EXPORTING
        i_kalsm = ekko-kalsm
        i_ekpo  = ekpo
      IMPORTING
        e_ekpo  = ekpo
      TABLES
        i_konv  = t_konv.

    IF NOT ekko-llief IS INITIAL.
      taxcom-lifnr = ekko-llief.
    ENDIF.

  ENDIF.

  CALL FUNCTION 'FIND_TAX_SPREADSHEET'
    EXPORTING
      buchungskreis = t001-bukrs
    EXCEPTIONS
      not_found     = 1
      OTHERS        = 2.


* Atualiza dados m_taxcom
  DATA: m_taxcom TYPE j_1b_taxcom.

*    m_taxcom-loc_pr = ekpo-txjcd.
  m_taxcom-loc_se = ekpo-txjcd.
  m_taxcom-loc_sr = ekpo-txjcd.
  m_taxcom-steuc  = ekpo-j_1bnbm.

* busca Estado do fornecedor
  SELECT SINGLE regio txjcd
         FROM lfa1
         INTO (m_taxcom-txreg_sf , m_taxcom-loc_pr)
         WHERE lifnr EQ ekko-lifnr.

* busca Estado do Centro
  SELECT SINGLE regio
         FROM t001w
         INTO m_taxcom-txreg_st
         WHERE werks EQ ekpo-werks.


  CALL FUNCTION 'J_1B_SAVE_TAX_FIELDS'
    EXPORTING
      i_taxcom = m_taxcom.
* Gustavo Atualiza dados m_taxcom

  CALL FUNCTION 'CALCULATE_TAX_ITEM'
    EXPORTING
      i_taxcom            = taxcom
    IMPORTING
      e_taxcom            = taxcom
    TABLES
      t_xkomv             = t_komv
    EXCEPTIONS
      mwskz_not_defined   = 1
      mwskz_not_found     = 2
      mwskz_not_valid     = 3
      steuerbetrag_falsch = 4
      country_not_found   = 5
      OTHERS              = 6.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*p_mwsbp = taxcom-wmwst .

  DELETE t_komv WHERE kposn NE ekpo-ebelp.
ENDFUNCTION. " calculate_tax