{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 *---------------------------------------------------------------------*\
* Programa : ZASN_MENU_MAIN_ECC\
* Cliente  : Sonda IT\
* M\'f3dulo   : FI\
* Transa\'e7\'e3o: ZASNT009\
* Descri\'e7\'e3o: Menu de Recebimento de Notas Fiscal Eletr\'f4nica\
* Autor    : Jo\'e3o Fonseca                              Data: 27/08/2009\
*---------------------------------------------------------------------*\
* Hist\'f3rico de Altera\'e7\'f5es:\
*---------------------------------------------------------------------*\
* Data       |Change #  |Autor            |Altera\'e7\'e3o\
*---------------------------------------------------------------------*\
* 27/08/2009 |ECDK915874|Jo\'e3o Fonseca     |Desenvolvimento Inicial\
*---------------------------------------------------------------------*\
REPORT zasn_menu_main_ecc.\
\
*---------------------------------------------------------------------*\
*Defini\'e7\'e3o de Tipos\
*---------------------------------------------------------------------*\
TYPES:\
  BEGIN OF saida_type,\
    transacao(10)  TYPE c,\
    descricao(100) TYPE c,\
  END OF saida_type.\
\
*---------------------------------------------------------------------*\
*Defini\'e7\'e3o de Constantes\
*---------------------------------------------------------------------*\
CONSTANTS:\
  c_i               TYPE c VALUE 'I',                    "Informa\'e7\'e3o\
  c_x               TYPE c VALUE 'X',                    "Flag\
  c_exit(4)         TYPE c VALUE 'EXIT',                 "Bot\'e3o\
  c_back(4)         TYPE c VALUE 'BACK',                 "Bot\'e3o\
  c_canc(4)         TYPE c VALUE 'CANC',                 "Bot\'e3o\
  c_gw_saida        TYPE dd02l-tabname VALUE 'GW_SAIDA', "tabela saida\
  c_descricao(09)   TYPE c VALUE 'DESCRICAO',            "Descri\'e7\'e3o\
  c_container(09)   TYPE c VALUE 'CONTAINER',            "Obj.Container\
  c_zasnt001(08)    TYPE c VALUE 'ZASNT001',             "Transa\'e7\'e3o\
  c_zasnt002(08)    TYPE c VALUE 'ZASNT002',             "Transa\'e7\'e3o\
  c_zasnt003(08)    TYPE c VALUE 'ZASNT003',             "Transa\'e7\'e3o\
  c_zasnt004(08)    TYPE c VALUE 'ZASNT004',             "Transa\'e7\'e3o\
  c_zasnt005(08)    TYPE c VALUE 'ZASNT005',             "Transa\'e7\'e3o\
  c_zasnt006(08)    TYPE c VALUE 'ZASNT006',             "Transa\'e7\'e3o\
  c_zasnt007(08)    TYPE c VALUE 'ZASNT007',             "Transa\'e7\'e3o\
  c_zasnt008(08)    TYPE c VALUE 'ZASNT008',             "Transa\'e7\'e3o\
  c_zasnt010(08)    TYPE c VALUE 'ZASNT010',             "Transa\'e7\'e3o\
  c_zasnt011(08)    TYPE c VALUE 'ZASNT011',             "Transa\'e7\'e3o\
  c_zasnt012(08)    TYPE c VALUE 'ZASNT012',             "Transa\'e7\'e3o\
  c_zasnt013(08)    TYPE c VALUE 'ZASNT013',             "Transa\'e7\'e3o\
  c_zasnt014(08)    TYPE c VALUE 'ZASNT014',             "Transa\'e7\'e3o\
  c_zasnt015(08)    TYPE c VALUE 'ZASNT015',             "Transa\'e7\'e3o\
  c_zasnt016(08)    TYPE c VALUE 'ZASNT016',             "Transa\'e7\'e3o\
  c_zasnt018(08)    TYPE c VALUE 'ZASNT018',             "Transa\'e7\'e3o\
  c_status_9000(11) TYPE c VALUE 'STATUS_9000',          "Status gui\
  c_title_9000(10)  TYPE c VALUE 'TITLE_9000'.           "Title\
\
*---------------------------------------------------------------------*\
*Defini\'e7\'e3o de Tabelas Internas\
*---------------------------------------------------------------------*\
DATA:\
\
*** Tabela interna especifica para ALV TREE\
  gw_fieldcatalog TYPE lvc_t_fcat,\
\
*** Layout do ALV Tree\
  gw_layout TYPE STANDARD TABLE OF lvc_s_layi,\
\
*** Tabela interna de saida do ALV\
  gw_saida TYPE STANDARD TABLE OF saida_type.\
\
*---------------------------------------------------------------------*\
*Defini\'e7\'e3o de Estruturas\
*---------------------------------------------------------------------*\
DATA:\
\
*** Cabe\'e7alho de n\'f3\
  gs_hierarchy_header TYPE treev_hhdr,\
\
*** Tabela interna especifica para ALV TREE\
  gs_fieldcatalog TYPE lvc_s_fcat,\
\
*** Layout do ALV Tree\
  gs_layout TYPE lvc_s_layi,\
\
*** Tabela de saida\
  gs_saida TYPE saida_type.\
\
*---------------------------------------------------------------------*\
*Defini\'e7\'e3o de Ponteiros\
*---------------------------------------------------------------------*\
FIELD-SYMBOLS:\
*** Tabela de saida\
  <fs_saida>          TYPE saida_type.\
\
*---------------------------------------------------------------------*\
*Defini\'e7\'e3o de Objetos\
*---------------------------------------------------------------------*\
DATA:\
  go_alv_tree     TYPE REF TO cl_gui_alv_tree,         "ALV Tree\
  go_container    TYPE REF TO cl_gui_custom_container. "Container\
\
*---------------------------------------------------------------------*\
*Defini\'e7\'e3o de Classes\
*---------------------------------------------------------------------*\
CLASS zcl_tree_event_receiver DEFINITION.                   "#EC *\
\
  PUBLIC SECTION.\
\
*** Define um cabe\'e7alho para cada evento\
    CLASS-METHODS:\
\
***   duplo clique\
      handle_node_double_click\
      FOR EVENT node_double_click OF cl_gui_alv_tree\
      IMPORTING node_key sender,\
\
***   Link Clique\
      handle_on_link_click\
      FOR EVENT link_click OF cl_gui_alv_tree\
      IMPORTING node_key sender.\
\
ENDCLASS.                    " zcl_tree_event_receiver DEFINITION\
\
*---------------------------------------------------------------------*\
*Implementa\'e7\'e3o da Classe\
*---------------------------------------------------------------------*\
CLASS zcl_tree_event_receiver IMPLEMENTATION.\
\
*** Metodo duplo clique\
  METHOD handle_node_double_click.\
\
    DATA:\
*** N\'f3s filhos\
      gw_children TYPE lvc_t_nkey.\
\
*** Verifica se o n\'f3 \'e9 tipo leaf, ou seja, n\'e3o pode ser expandida\
    CALL METHOD sender->get_children\
      EXPORTING\
        i_node_key         = node_key\
      IMPORTING\
        et_children        = gw_children\
      EXCEPTIONS\
        historic_error     = 1\
        node_key_not_found = 2\
        OTHERS             = 3.\
\
    CHECK gw_children[] IS INITIAL.\
\
    READ TABLE gw_saida ASSIGNING <fs_saida> INDEX node_key.\
\
    CHECK sy-subrc = 0.\
\
    CALL TRANSACTION <fs_saida>-transacao.\
\
  ENDMETHOD.                    " zcl_tree_event_receiver IMPLEMENTATION\
\
*** Metodo link click\
  METHOD handle_on_link_click.\
\
    CALL METHOD handle_node_double_click\
      EXPORTING\
        node_key = node_key\
        sender   = sender.\
\
  ENDMETHOD.                    "handle_on_link_click\
\
ENDCLASS.                    " zcl_tree_event_receiver IMPLEMENTATION\
\
*&--------------------------------------------------------------------*\
*&      Module  O_9000  OUTPUT\
*&--------------------------------------------------------------------*\
*       text\
*---------------------------------------------------------------------*\
MODULE o_9000 OUTPUT.\
\
  SET PF-STATUS c_status_9000.\
  SET TITLEBAR  c_title_9000.\
\
*** Constroi ALV Tree\
  PERFORM zf_inicializar_alv_tree.\
\
  CALL METHOD cl_gui_cfw=>flush\
    EXCEPTIONS\
      cntl_system_error = 1\
      cntl_error        = 2.\
\
ENDMODULE.                 " O_9000  OUTPUT\
\
*&--------------------------------------------------------------------*\
*&      Module  I_9000  INPUT\
*&--------------------------------------------------------------------*\
*       text\
*---------------------------------------------------------------------*\
MODULE i_9000 INPUT.\
\
  CASE sy-ucomm.\
    WHEN c_exit OR c_back OR c_canc.\
***   Saida do programa\
      PERFORM zf_exit_program.\
  ENDCASE.\
\
  CALL METHOD cl_gui_cfw=>flush\
    EXCEPTIONS\
      cntl_system_error = 1\
      cntl_error        = 2.\
\
ENDMODULE.                 " I_9000  INPUT\
\
*&--------------------------------------------------------------------*\
*&      Form  ZF_INICIALIZAR_ALV_TREE\
*&--------------------------------------------------------------------*\
*       Constroi ALV Tree\
*---------------------------------------------------------------------*\
FORM zf_inicializar_alv_tree .\
\
  IF go_container IS NOT BOUND.\
\
*** Criar container\
    PERFORM zf_cria_container.\
\
*** Criar alv tree\
    PERFORM zf_cria_alvtree.\
\
*** Monta cat\'e1logo de sa\'edda\
    PERFORM zf_monta_fieldcatalog.\
\
*** Cabe\'e7alho da hierarquia\
    PERFORM zf_build_hierarchy_header CHANGING gs_hierarchy_header.\
\
*** Inicia ALV Tree - tabela deve gw_saida estar vazia\
    CALL METHOD go_alv_tree->set_table_for_first_display\
      EXPORTING\
        is_hierarchy_header = gs_hierarchy_header\
      CHANGING\
        it_outtab           = gw_saida\
        it_fieldcatalog     = gw_fieldcatalog.\
\
*** Carrega as informa\'e7\'f5es hierarquicamente\
    PERFORM zf_create_hierarchy.\
\
*** Informa ao ALV tree os eventos\
    PERFORM zf_registra_eventos.\
\
*** Expande os n\'f3s do ALV\
    PERFORM zf_expandir_alv.\
\
  ENDIF.\
\
*** Exibe ALV Tree\
  CALL METHOD go_alv_tree->frontend_update.\
\
ENDFORM.                    " ZF_INICIALIZAR_ALV_TREE\
\
*&--------------------------------------------------------------------*\
*&      Form  ZF_CRIA_CONTAINER\
*&--------------------------------------------------------------------*\
*       Cria objeto Container\
*---------------------------------------------------------------------*\
FORM zf_cria_container .\
\
  CREATE OBJECT go_container\
    EXPORTING\
      container_name              = c_container\
    EXCEPTIONS\
      cntl_error                  = 1\
      cntl_system_error           = 2\
      create_error                = 3\
      lifetime_error              = 4\
      lifetime_dynpro_dynpro_link = 5\
      OTHERS                      = 6.\
\
  CHECK sy-subrc <> 0 .\
\
*** Volta tela inicial ap\'f3s mensagem de erro.\
  MESSAGE ID sy-msgid TYPE c_i NUMBER sy-msgno\
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.\
\
  LEAVE TO SCREEN 0.\
\
ENDFORM.                    " ZF_CRIA_CONTAINER\
\
\
*&--------------------------------------------------------------------*\
*&      Form  ZF_CRIA_ALVTREE\
*&--------------------------------------------------------------------*\
*       Cria objeto ALV Tree\
*---------------------------------------------------------------------*\
FORM zf_cria_alvtree .\
\
  CREATE OBJECT go_alv_tree\
    EXPORTING\
      parent                      = go_container\
      node_selection_mode         = cl_gui_column_tree=>node_sel_mode_single\
      item_selection              = c_x\
      no_html_header              = c_x\
      no_toolbar                  = space\
    EXCEPTIONS\
      cntl_error                  = 1\
      cntl_system_error           = 2\
      create_error                = 3\
      lifetime_error              = 4\
      illegal_node_selection_mode = 5\
      failed                      = 6\
      illegal_column_name         = 7\
      OTHERS                      = 8.\
\
  CHECK sy-subrc <> 0.\
\
*** Volta a tela inicial ap\'f3s mensagem de erro\
  MESSAGE ID sy-msgid TYPE c_i NUMBER sy-msgno\
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.\
\
  LEAVE TO SCREEN 0.\
\
ENDFORM.                    " ZF_CRIA_ALVTREE\
\
*&--------------------------------------------------------------------*\
*&      Form: zf_monta_fieldcatalog\
*&--------------------------------------------------------------------*\
*      Cria a estrutura de fieldcatalog.\
*---------------------------------------------------------------------*\
FORM zf_monta_fieldcatalog.\
\
  gs_fieldcatalog-fieldname = c_descricao.\
  gs_fieldcatalog-tabname   = c_gw_saida.\
  gs_fieldcatalog-outputlen = 100.\
  gs_fieldcatalog-coltext   = text-t02.\
\
  APPEND gs_fieldcatalog TO gw_fieldcatalog.\
  CLEAR  gs_fieldcatalog.\
\
ENDFORM.                    " ZF_CRIA_FIELDCAT\
\
*&--------------------------------------------------------------------*\
*&      Form  ZF_BUILD_HIERARCHY_HEADER\
*&--------------------------------------------------------------------*\
*       Caracter\'edsticas do Cabe\'e7alho de hierarquia\
*---------------------------------------------------------------------*\
*      <-- P_HIERARCHY_HEADER  Cabe\'e7alho da hierarquia\
*---------------------------------------------------------------------*\
FORM zf_build_hierarchy_header CHANGING p_hierarchy_header\
                               TYPE     treev_hhdr.\
\
  p_hierarchy_header-heading = text-t01.\
  p_hierarchy_header-width   = 71.\
\
ENDFORM.                    " ZF_BUILD_HIERARCHY_HEADER\
\
*&--------------------------------------------------------------------*\
*&      Form  ZF_CREATE_HIERARCHY\
*&--------------------------------------------------------------------*\
*       Monta registros do ALV\
*---------------------------------------------------------------------*\
FORM zf_create_hierarchy .\
\
  DATA: ln_nivel0_key  TYPE lvc_nkey, "Controle da hierarquia\
        ln_nivel1_key  TYPE lvc_nkey, "Controle da hierarquia\
        ln_last_key    TYPE lvc_nkey. "Controle da hierarquia\
\
*** Adiciona n\'f3 raiz - nivel 0\
  PERFORM zf_add_node USING   text-001\
                              space\
                     CHANGING ln_nivel0_key.\
\
*** Adiciona n\'f3 1.1\
  PERFORM zf_add_node USING   text-002\
                              ln_nivel0_key\
                     CHANGING ln_nivel1_key.\
\
*** Adiciona registro 1.1.1\
  PERFORM zf_add_registro USING    text-012\
                                   text-i01\
                                   c_zasnt001\
                                   ln_nivel1_key\
                          CHANGING ln_last_key.\
\
*** Adiciona n\'f3 1.2\
  PERFORM zf_add_node USING   text-003\
                              ln_nivel0_key\
                     CHANGING ln_nivel1_key.\
\
*** Adiciona registro 1.2.1\
  PERFORM zf_add_registro USING    text-013\
                                   text-i02\
                                   c_zasnt002\
                                   ln_nivel1_key\
                          CHANGING ln_last_key.\
\
*** Adiciona n\'f3 1.3\
  PERFORM zf_add_node USING   text-004\
                              ln_nivel0_key\
                     CHANGING ln_nivel1_key.\
\
*** Adiciona registro 1.3.1\
  PERFORM zf_add_registro USING    text-005\
                                   text-i03\
                                   c_zasnt003\
                                   ln_nivel1_key\
                          CHANGING ln_last_key.\
\
*** Adiciona registro 1.3.2\
  PERFORM zf_add_registro USING    text-007\
                                   text-i04\
                                   c_zasnt004\
                                   ln_nivel1_key\
                          CHANGING ln_last_key.\
\
*** Adiciona registro 1.3.3\
  PERFORM zf_add_registro USING    text-023\
                                   text-i05\
                                   c_zasnt005\
                                   ln_nivel1_key\
                          CHANGING ln_last_key.\
\
*** Adiciona registro 1.3.4\
  PERFORM zf_add_registro USING    text-024\
                                   text-i06\
                                   c_zasnt006\
                                   ln_nivel1_key\
                          CHANGING ln_last_key.\
\
*** Adiciona n\'f3 1.4\
  PERFORM zf_add_node USING   text-009\
                              ln_nivel0_key\
                     CHANGING ln_nivel1_key.\
\
*** Adiciona registro 1.4.1\
  PERFORM zf_add_registro USING    text-010\
                                   text-i07\
                                   c_zasnt007\
                                   ln_nivel1_key\
                          CHANGING ln_last_key.\
\
*** Adiciona registro 1.4.2\
  PERFORM zf_add_registro USING    text-011\
                                   text-i08\
                                   c_zasnt008\
                                   ln_nivel1_key\
                          CHANGING ln_last_key.\
\
*** Adiciona n\'f3 1.5\
  PERFORM zf_add_node USING   text-014\
                              ln_nivel0_key\
                     CHANGING ln_nivel1_key.\
\
*** Adiciona registro 1.5.1\
  PERFORM zf_add_registro USING    text-015\
                                   text-i09\
                                   c_zasnt010\
                                   ln_nivel1_key\
                          CHANGING ln_last_key.\
\
*** Adiciona registro 1.5.2\
  PERFORM zf_add_registro USING    text-016\
                                   text-i10\
                                   c_zasnt011\
                                   ln_nivel1_key\
                          CHANGING ln_last_key.\
\
*** Adiciona registro 1.5.3\
*  PERFORM zf_add_registro USING    text-017\
*                                   text-i11\
*                                   c_zasnt012\
*                                   ln_nivel1_key\
*                          CHANGING ln_last_key.\
\
*** Adiciona registro 1.5.4\
*  PERFORM zf_add_registro USING    text-018\
*                                   text-i12\
*                                   c_zasnt013\
*                                   ln_nivel1_key\
*                          CHANGING ln_last_key.\
\
*** Adiciona registro 1.5.5\
  PERFORM zf_add_registro USING    text-019\
                                   text-i13\
                                   c_zasnt014\
                                   ln_nivel1_key\
                          CHANGING ln_last_key.\
\
*** Adiciona registro 1.5.6\
*  PERFORM zf_add_registro USING    text-020\
*                                   text-i14\
*                                   c_zasnt015\
*                                   ln_nivel1_key\
*                          CHANGING ln_last_key.\
\
*** Adiciona registro 1.5.7\
*  PERFORM zf_add_registro USING    text-021\
*                                   text-i15\
*                                   c_zasnt016\
*                                   ln_nivel1_key\
*                          CHANGING ln_last_key.\
\
\
*** Adiciona registro 1.5.5\
  perform zf_add_registro using    text-022\
                                   text-i16\
                                   c_zasnt018\
                                   ln_nivel1_key\
                          changing ln_last_key.\
\
ENDFORM.                    " ZF_CREATE_HIERARCHY\
\
*&---------------------------------------------------------------------*\
*&      Form  zf_add_registro\
*&---------------------------------------------------------------------*\
*       Adiciona linha do ALV\
*----------------------------------------------------------------------*\
*      -->P_DESC     descricao\
*      -->P_NAME     nome\
*      -->P_KEY      nivel gerado\
*      -->P_TRANS    transacao\
*      <--P_LAST_KEY chave gerada\
*----------------------------------------------------------------------*\
FORM zf_add_registro USING p_desc     TYPE any\
                           p_name     TYPE any\
                           p_trans    TYPE any\
                           p_key      TYPE any\
                  CHANGING p_last_key TYPE any.\
\
  gs_saida-descricao = p_desc.\
  gs_saida-transacao = p_trans.\
\
*** Adiciona as linhas com informa\'e7\'f5es completas\
  PERFORM zf_add_leaf USING  p_name\
                             p_key\
                   CHANGING  p_last_key.\
\
ENDFORM.                    " ZF_CREATE_HIERARCHY\
\
*&--------------------------------------------------------------------*\
*&      Form  ZF_ADD_NODE\
*&--------------------------------------------------------------------*\
*       Adiciona n\'f3s na estrutura da \'e1rvore\
*---------------------------------------------------------------------*\
* -->    P_NAME      nome do n\'f3\
* -->    P_RELAT_KEY nivel acima da informa\'e7\'e3o\
* <--    P_NODE_KEY  nivel gerado\
*---------------------------------------------------------------------*\
FORM zf_add_node USING    p_name       TYPE any\
                          p_relat_key  TYPE any\
                 CHANGING p_node_key   TYPE any.\
\
  CLEAR   gs_saida.\
  REFRESH gw_layout.\
\
*** cria nova linha na estrutura ALV TREE\
  PERFORM zf_cria_tree USING p_relat_key\
                             p_name\
                       CHANGING p_node_key.\
\
ENDFORM.                    " ZF_ADD_NODE\
\
*&--------------------------------------------------------------------*\
*&      Form  ZF_ADD_LEAF\
*&--------------------------------------------------------------------*\
*       Adiciona registro completo na estrutura da \'e1rvore\
*---------------------------------------------------------------------*\
* --> P_DESC       descri\'e7\'e3o do n\'f3\
* --> P_NEXT_KEY   chave anterior\
* <-- P_LAST_KEY   chave gerada\
*---------------------------------------------------------------------*\
FORM zf_add_leaf USING p_desc     TYPE any\
                       p_next_key TYPE any\
              CHANGING p_last_key TYPE any.\
\
*** Obtem o proxima chave a ser gerada\
  CALL METHOD go_alv_tree->get_outtab_line\
    EXPORTING\
      i_node_key     = p_next_key\
    EXCEPTIONS\
      node_not_found = 1.\
\
  CHECK sy-subrc IS INITIAL.\
\
*** Criar layout\
  REFRESH: gw_layout.\
  gs_layout-fieldname = go_alv_tree->c_hierarchy_column_name.\
  gs_layout-class     = cl_gui_column_tree=>item_class_link.\
  APPEND gs_layout TO gw_layout.\
  CLEAR  gs_layout.\
\
*** Cria nova linha na estrutura ALV TREE\
  PERFORM zf_cria_tree USING    p_next_key\
                                p_desc\
                       CHANGING p_last_key.\
\
ENDFORM.                    " ZF_ADD_LEAF\
\
*&---------------------------------------------------------------------*\
*&      Form  ZF_CRIA_TREE\
*&---------------------------------------------------------------------*\
*       Adiciona linha a estrutura ALV TREE\
*----------------------------------------------------------------------*\
*      -->P_RELAT_KEY    n\'f3 pai\
*      -->P_TEXT         Texto do n\'f3\
*      <--P_LAST_KEY     n\'f3 gerado\
*----------------------------------------------------------------------*\
FORM zf_cria_tree  USING    p_relat_key TYPE any\
                            p_text      TYPE any\
                   CHANGING p_last_key  TYPE any.\
\
*** Adicionar N\'f3\
  CALL METHOD go_alv_tree->add_node\
    EXPORTING\
      i_relat_node_key     = p_relat_key\
      i_relationship       = cl_gui_column_tree=>relat_last_child\
      i_node_text          = p_text\
      is_outtab_line       = gs_saida\
      it_item_layout       = gw_layout\
    IMPORTING\
      e_new_node_key       = p_last_key\
    EXCEPTIONS\
      relat_node_not_found = 1\
      node_not_found       = 2.\
\
ENDFORM.                    " ZF_CRIA_TREE\
\
*&---------------------------------------------------------------------*\
*&      Form  ZF_REGISTRA_EVENTOS\
*&---------------------------------------------------------------------*\
*       Informa ao ALV TREE os eventos\
*----------------------------------------------------------------------*\
FORM zf_registra_eventos .\
\
  DATA\
*** Eventos\
    lw_events TYPE cntl_simple_events.\
\
  DATA\
*** Eventos\
    ls_event  TYPE cntl_simple_event.\
\
  DATA\
*** Reecebe os eventos\
    lo_event_receiver TYPE REF TO zcl_tree_event_receiver.\
\
  CALL METHOD go_alv_tree->get_registered_events\
    IMPORTING\
      events     = lw_events\
    EXCEPTIONS\
      cntl_error = 1\
      OTHERS     = 2.\
\
*** Evento duplo clique\
  ls_event-eventid = cl_gui_column_tree=>eventid_node_double_click.\
  APPEND ls_event TO lw_events.\
\
*** Evento link clique\
  ls_event-eventid = cl_gui_column_tree=>eventid_link_click.\
  APPEND ls_event TO lw_events.\
\
  CALL METHOD go_alv_tree->set_registered_events\
    EXPORTING\
      events                    = lw_events\
    EXCEPTIONS\
      cntl_error                = 1\
      cntl_system_error         = 2\
      illegal_event_combination = 3\
      OTHERS                    = 4.\
\
  IF sy-subrc <> 0.\
\
*** Volta tela inicial ap\'f3s mensagem de erro.\
    MESSAGE ID sy-msgid TYPE c_i NUMBER sy-msgno\
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.\
\
    LEAVE TO SCREEN 0.\
\
  ENDIF.\
\
  CREATE OBJECT lo_event_receiver.\
\
  SET HANDLER lo_event_receiver->handle_node_double_click\
                               FOR go_alv_tree.\
\
  SET HANDLER lo_event_receiver->handle_on_link_click\
                               FOR go_alv_tree.\
\
ENDFORM.                    " ZF_REGISTRA_EVENTS\
\
*&---------------------------------------------------------------------*\
*&      Form  ZF_EXPANDIR_ALV\
*&---------------------------------------------------------------------*\
*       Expande os n\'f3s do ALV\
*----------------------------------------------------------------------*\
FORM zf_expandir_alv .\
\
  DATA:\
*** N\'f3\
    ls_node_key TYPE lvc_nkey.\
\
  DATA:\
*** N\'f3\
    lw_node_key TYPE STANDARD TABLE OF lvc_nkey.\
\
  ls_node_key = 2.\
  APPEND ls_node_key TO lw_node_key.\
\
  ls_node_key = 4.\
  APPEND ls_node_key TO lw_node_key.\
\
  ls_node_key = 6.\
  APPEND ls_node_key TO lw_node_key.\
\
  ls_node_key = 11.\
  APPEND ls_node_key TO lw_node_key.\
\
  ls_node_key = 14.\
  APPEND ls_node_key TO lw_node_key.\
\
  CALL METHOD go_alv_tree->expand_nodes\
    EXPORTING\
      it_node_key             = lw_node_key\
    EXCEPTIONS\
      failed                  = 1\
      cntl_system_error       = 2\
      error_in_node_key_table = 3\
      dp_error                = 4\
      node_not_found          = 5\
      OTHERS                  = 6.\
\
  CHECK sy-subrc <> 0.\
\
  MESSAGE ID sy-msgid TYPE c_i NUMBER sy-msgno\
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.\
\
  LEAVE TO SCREEN 0.\
\
ENDFORM.                    " ZF_EXPANDIR_ALV\
\
*&--------------------------------------------------------------------*\
*&      Form  ZF_EXIT_PROGRAM\
*&--------------------------------------------------------------------*\
*       Saida do programa\
*---------------------------------------------------------------------*\
FORM zf_exit_program .\
\
*** Liberar o container da m\'e9moria\
  CALL METHOD go_container->free\
    EXCEPTIONS\
      cntl_error        = 1\
      cntl_system_error = 2\
      OTHERS            = 3.\
\
*** Voltar para tela inicial\
  LEAVE TO SCREEN 0.\
\
ENDFORM.                    " ZF_EXIT_PROGRAM}